class Solution {
public:

    ListNode* reverse(ListNode* head) {
        if (!head || !head->next) {
            return head;
        }
        ListNode* new_node = reverse(head->next);
        head->next->next = head;
        head->next = NULL;
        return new_node;
    }

    void reorderList(ListNode* head) {
        if (!head || !head->next || !head->next->next) {
            return;
        }

        // Find the middle of the list using fast and slow pointers
        ListNode* slow = head;
        ListNode* fast = head;
        while (fast->next && fast->next->next) {
            slow = slow->next;
            fast = fast->next->next;
        }

        // Reverse the second half of the list
        ListNode* reversed = reverse(slow->next);
        slow->next = NULL;

        // Merge the two halves
        ListNode* current = head;
        while (reversed) {
            ListNode* temp1 = current->next;
            ListNode* temp2 = reversed->next;
            current->next = reversed;
            reversed->next = temp1;
            current = temp1;
            reversed = temp2;
        }
    }
};
